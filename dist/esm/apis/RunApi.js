/* tslint:disable */
/* eslint-disable */
/**
 * Autotab API
 * AI that does your repetitive work end to end, with superhuman reliability.
 *
 * The version of the OpenAPI document: 0.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { RunSessionFromJSON, RunSkillRequestToJSON, } from '../models/index';
/**
 *
 */
export class RunApi extends runtime.BaseAPI {
    /**
     * Cancel
     */
    cancelRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling cancel().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = `Bearer ${yield this.configuration.apiKey("")}`;
            }
            const response = yield this.request({
                path: `/run/{id}/cancel`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Cancel
     */
    cancel(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cancelRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List
     */
    listRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['skillId'] != null) {
                queryParameters['skill_id'] = requestParameters['skillId'];
            }
            if (requestParameters['stateFilter'] != null) {
                queryParameters['state_filter'] = requestParameters['stateFilter'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = `Bearer ${yield this.configuration.apiKey("")}`;
            }
            const response = yield this.request({
                path: `/run/list`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RunSessionFromJSON));
        });
    }
    /**
     * List
     */
    list() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve
     */
    retrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling retrieve().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = `Bearer ${yield this.configuration.apiKey("")}`;
            }
            const response = yield this.request({
                path: `/run/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => RunSessionFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve
     */
    retrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.retrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Start
     */
    startRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['runSkillRequest'] == null) {
                throw new runtime.RequiredError('runSkillRequest', 'Required parameter "runSkillRequest" was null or undefined when calling start().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = `Bearer ${yield this.configuration.apiKey("")}`;
            }
            const response = yield this.request({
                path: `/run/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: RunSkillRequestToJSON(requestParameters['runSkillRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => RunSessionFromJSON(jsonValue));
        });
    }
    /**
     * Start
     */
    start(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.startRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
